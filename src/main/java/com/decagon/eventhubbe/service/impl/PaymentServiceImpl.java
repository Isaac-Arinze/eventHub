package com.decagon.eventhubbe.service.impl;import com.decagon.eventhubbe.domain.entities.*;import com.decagon.eventhubbe.domain.repository.AccountRepository;import com.decagon.eventhubbe.domain.repository.AppUserRepository;import com.decagon.eventhubbe.domain.repository.PaymentRepository;import com.decagon.eventhubbe.dto.request.PaymentRequest;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.modelmapper.ModelMapper;import org.springframework.beans.factory.annotation.Value;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import org.springframework.web.client.RestTemplate;import java.time.LocalDateTime;@Service@Slf4j@RequiredArgsConstructorpublic class PaymentServiceImpl {    @Value("${payment.key}")    private String SECRETE_KEY;    private final HttpHeaders headers;    private final RestTemplate restTemplate;    private final ModelMapper modelMapper;    private final AccountRepository accountRepository;    private final AppUserRepository appUserRepository;    private final PaymentRepository paymentRepository;    public PaymentRequest acceptTransfer(PaymentRequest paymentDTO){        AppUser user = appUserRepository.findByEmail(paymentDTO.getEmail()).orElse(null);        assert user != null;        log.info("user {}",user.toString());        Account account =accountRepository.findById(user.getId()).orElse(null);        String url =  "https://api.paystack.co/transaction/initialize";        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);        headers.setBearerAuth(SECRETE_KEY);        headers.setCacheControl("no-cache");        MultiValueMap<String, String> body = new LinkedMultiValueMap<>();        body.add("email", paymentDTO.getEmail());        body.add("amount", String.valueOf(paymentDTO.getAmount()));        assert account != null;        body.add("subaccount", account.getSubaccount_code());        HttpEntity<MultiValueMap<String, String>> httpEntity = new HttpEntity<>(body, headers);        ResponseEntity<PaymentRequest> response = restTemplate.postForEntity(url, httpEntity, PaymentRequest.class);        Payment payment = Payment.builder()                .amount(paymentDTO.getAmount())                .timestamp(LocalDateTime.now())                .buyerEmail(paymentDTO.getBuyerEmail())                .buyerName(paymentDTO.getBuyerName())                .buyerPhone(paymentDTO.getBuyerPhone())                .build();        paymentRepository.save(payment);        return  modelMapper.map(response,PaymentRequest.class);    }}