package com.decagon.eventhubbe.service.impl;import com.decagon.eventhubbe.config.AccountPaymentOveridden;import com.decagon.eventhubbe.domain.entities.*;import com.decagon.eventhubbe.domain.repository.*;import com.decagon.eventhubbe.dto.request.PaymentRequest;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.modelmapper.ModelMapper;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import java.time.LocalDate;import java.time.LocalDateTime;@Service@Slf4j@RequiredArgsConstructorpublic class PaymentServiceImpl {    private final ModelMapper modelMapper;    private final AccountRepository accountRepository;    private final AppUserRepository appUserRepository;    private final PaymentRepository paymentRepository;    private final EventTicketRepository eventTicketRepository;    public PaymentRequest payment(PaymentRequest paymentDTO) {        AppUser user = appUserRepository.findByEmail(paymentDTO.getEmail()).orElse(null);        assert user != null;        log.info("user {}", user.toString());        Account account = accountRepository.findById(user.getId()).orElse(null);        EventTicket eventTicket = eventTicketRepository.findById(paymentDTO.getEventId())                .orElseThrow(() -> new RuntimeException("Event not found."));        if (eventTicket.getEvent().getDate().isBefore(LocalDate.now().atStartOfDay())) {            throw new IllegalArgumentException("Event has already occurred.");        }        String url = "https://api.paystack.co/transaction/initialize";        MultiValueMap<String, String> body = new LinkedMultiValueMap<>();        body.add("email", paymentDTO.getEmail());        body.add("amount", String.valueOf(paymentDTO.getAmount()));        assert account != null;        body.add("subaccount", account.getSubaccount_code());        ResponseEntity<PaymentRequest> response = AccountPaymentOveridden.performPostRequest(url, body, PaymentRequest.class);        Payment payment = Payment.builder()                .amount(paymentDTO.getAmount())                .timestamp(LocalDateTime.now())                .buyerEmail(paymentDTO.getBuyerEmail())                .buyerName(paymentDTO.getBuyerName())                .qty(paymentDTO.getQty())                .eventTicket(eventTicket)                .build();        paymentRepository.save(payment);        return modelMapper.map(response, PaymentRequest.class);    }}